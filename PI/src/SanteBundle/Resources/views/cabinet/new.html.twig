{% extends is_granted('RES_Salle_SPORT') ? "::baseBack.html.twig" : "::base.html.twig"%}

{% block content %}

    <div class="contain-wrapp padding-top40 padding-bot40">
        <div class="container">
            <div class="row">
                <div class="col-md-6 col-sm-6">
                    <!-- End Shortcode -->

                    {{ form_start(form, {'attr': {'class': 'fos_user_registration_register'}}) }}


                    <div class="form-group">
                        <label>Ouverture <span class="noempaty">*</span></label>
                        {{ form_widget(form.horaireOuvertureCabinet,{'attr':{'class':'form-control','placeholder':"" }}) }}
                        {{ form_errors(form.horaireOuvertureCabinet) }}
                    </div>
                    <div class="form-group">
                        <label>Fermeture <span class="noempaty">*</span></label>
                        {{ form_widget(form.horaireFermetureCabinet,{'attr':{'class':'form-control','placeholder':"" }}) }}
                        {{ form_errors(form.horaireFermetureCabinet) }}
                    </div>
                    <div class="form-group">
                        <label>Adresse : <span class="noempaty">*</span></label>
                        {{ form_widget(form.adresseCabinet,{'attr':{'class':'form-control','placeholder':"Adrresse" }}) }}
                        {{ form_errors(form.adresseCabinet) }}
                    </div>
                    <div class="form-group">
                        <label>Telephone : <span class="noempaty">*</span></label>
                        {{ form_widget(form.numTelCabinet,{'attr':{'class':'form-control','placeholder':"Telephone" }}) }}
                        {{ form_errors(form.numTelCabinet) }}
                    </div>
                    <div class="form-group">
                        <label>Responsable : <span class="noempaty">*</span></label>
                        {{ form_widget(form.id_resp_cabinet,{'attr':{'class':'form-control','placeholder':"Responsable" }}) }}
                        {{ form_errors(form.id_resp_cabinet) }}
                    </div>
                    {{ form_widget(form) }}
                    <input type="submit"   class="btn btn-primary" value="Ajout Cabinet" />
                    {{ form_end(form) }}                    <!-- Start Shortcode -->
                </div>
            </div>
        </div>
    </div>


    <script>
        // This example displays an address form, using the autocomplete feature
        // of the Google Places API to help users fill in the information.

        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        var placeSearch, autocomplete;
        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        };

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search to geographical
            // location types.
            autocomplete = new google.maps.places.Autocomplete(
                /** @type {!HTMLInputElement} */(document.getElementById('santebundle_cabinet_adresseCabinet')),
                {types: ['geocode']});

            // When the user selects an address from the dropdown, populate the address
            // fields in the form.
            autocomplete.addListener('place_changed', fillInAddress);
        }

        function fillInAddress() {
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();

            for (var component in componentForm) {
                document.getElementById(component).value = '';
                document.getElementById(component).disabled = false;
            }

            // Get each component of the address from the place details
            // and fill the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType]];
                    document.getElementById(addressType).value = val;
                }
            }
        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAPA4BnpQqumyWqAx0AM47thvSDPQw-oTU&libraries=places&callback=initAutocomplete"
            async defer></script>
{% endblock content %}
